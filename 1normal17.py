f = open('17_normal.txt')  # открытие файла
m = [int(i) for i in f] # создание массива со всеми числами в файле

elem_88 = [i for i in m if i % 100 == 88]  # массив с числами, оканчивающимися на 73
elem_88.sort()  # сортировка по возрастанию если понадобится проверить правильность значений
max_elem = max(elem_88)  # максимальный элемент последовательности, оканчивающийся на 88
# также можно вывести так - max_elem = elem_88[-1] ,так как массив уже отсортирован

result = []  # массив куда будем записывать куб полусуммы найденных пар
for i in range(0, len(m) - 2):  # цикл перебора пар начинается с 0 до длины массива m уменьшенного на 2
                                # уменьшаем на 2, так как тройка чисел
    e1 = m[i]  # первый элемент пары
    e2 = m[i + 1] # второй элемент пары
    e3 = m[i + 2] # третий элемент пары
    if (e1 <= 999 or e1 >= 10000) and (e2 <= 999 or e2 >= 10000) and (e3 <= 999 or e3 >= 10000):
    # проверяем что ни одно число не четырёхзначное
        count_3 = 0 # счетчик трехзначных чисел
        # если встречается трехзначное число счетчик увеличивается на 1
        if 100 <= e1 <= 999: # проверка элемента 1
            count_3 += 1
        if 100 <= e2 <= 999: # проверка элемента 2
            count_3 += 1
        if 100 <= e3 <= 999: # проверка элемента 3
            count_3 += 1
        # проверка условия
        if count_3 == 1 and (e1 + e2 + e3) * 2 <= max_elem:
            result.append(e1 + e2 + e3) # добавление в массив суммы чисел тройки

result.sort()  # сортировка по возрастанию если понадобится проверить правильность значений
print(len(result), max(result))  # вывод ответа